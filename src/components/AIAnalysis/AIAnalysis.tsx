import React, { useState, useCallback, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";
import {
  Brain,
  Zap,
  TrendingUp,
  FileText,
  Download,
  AlertCircle,
  Info,
  Sparkles,
} from "lucide-react";
import { useSingleCryptoAnalysis } from "@/shared/api/hooks/useCrypto";
import { CryptoAsset } from "@/shared/api/types";
import { 
  sanitizeText, 
  sanitizeReportContent, 
  downloadFile, 
  validateCryptoData,
  RateLimiter 
} from "@/shared/lib/security";

interface AIAnalysisProps {
  crypto: CryptoAsset;
  className?: string;
}

// Rate limiter para análises (5 por minuto)
const analysisRateLimiter = new RateLimiter(5, 60000);

const AIAnalysis: React.FC<AIAnalysisProps> = ({ crypto, className = "" }) => {
  const [showReport, setShowReport] = useState(false);

  const {
    mutate: generateAnalysis,
    isPending,
    error,
    data: analysisData,
  } = useSingleCryptoAnalysis();

  // Validação de entrada
  const isValidCrypto = useMemo(() => {
    return validateCryptoData(crypto);
  }, [crypto]);

  const handleGenerateAnalysis = useCallback(() => {
    if (!isValidCrypto) {
      console.error('Invalid crypto data provided');
      return;
    }

    if (!analysisRateLimiter.canMakeRequest()) {
      console.warn('Rate limit exceeded. Please wait before making another request.');
      return;
    }

    generateAnalysis(crypto, {
      onSuccess: () => {
        setShowReport(true);
      },
      onError: (error) => {
        console.error('Analysis failed:', error);
      }
    });
  }, [crypto, isValidCrypto, generateAnalysis]);

  const generateDemoReport = useCallback(() => {
    if (!isValidCrypto) return "Invalid crypto data";
    
    const safeSymbol = sanitizeText(crypto.symbol);
    const safeName = sanitizeText(crypto.name);
    const price = parseFloat(crypto.priceUsd);
    const change = parseFloat(crypto.changePercent24Hr);
    
    return `# ${safeName} (${safeSymbol}) Analysis Report

Generated by AGENTFINANCE AI Agent [DEMO MODE]
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

## Market Overview
- Current Price: $${price.toLocaleString()}
- 24h Change: ${change.toFixed(2)}%
- Market Cap: $${(parseFloat(crypto.marketCapUsd) / 1e9).toFixed(2)}B
- 24h Volume: $${(parseFloat(crypto.volumeUsd24Hr) / 1e6).toFixed(2)}M

## Technical Analysis
[DEMO] Based on current market data for ${safeSymbol}:

• Price Action: ${change > 0 ? "Bullish momentum" : "Bearish pressure"}
• Volume Analysis: ${parseFloat(crypto.volumeUsd24Hr) > 1000000 ? "High trading volume" : "Moderate volume"}
• Market Position: ${parseFloat(crypto.marketCapUsd) > 10000000000 ? "Large cap" : "Mid cap"} cryptocurrency

## Market Sentiment
• Current Trend: ${change > 5 ? "Strongly Bullish" : change > 0 ? "Bullish" : change > -5 ? "Neutral" : "Bearish"}
• Volatility: ${Math.abs(change) > 10 ? "High" : "Moderate"}
• Risk Level: ${Math.abs(change) > 15 ? "High" : "Medium"}

## Investment Recommendations
• Short-term: ${change > 0 ? "Hold/Accumulate" : "Wait for better entry"}
• Medium-term: Monitor key support/resistance levels
• Long-term: Consider market fundamentals and adoption

## Price Predictions
• Support Level: $${(price * 0.9).toFixed(4)}
• Resistance Level: $${(price * 1.1).toFixed(4)}
• 7-day Outlook: ${change > 0 ? "Potential upside" : "Sideways with downside risk"}

## Disclaimer
This is a demo analysis. This analysis is for informational purposes only and should not be considered as financial advice.`;
  }, [crypto, isValidCrypto]);

  const handleDownloadReport = useCallback(() => {
    if (!isValidCrypto) return;
    
    try {
      const reportContent = analysisData?.report || generateDemoReport();
      const timestamp = new Date().toISOString().split("T")[0];
      const filename = `${crypto.symbol}_analysis_${timestamp}.md`;
      
      downloadFile(reportContent, filename);
    } catch (error) {
      console.error('Download failed:', error);
    }
  }, [analysisData, crypto.symbol, isValidCrypto, generateDemoReport]);

  // Conteúdo sanitizado para exibição
  const reportContent = useMemo(() => {
    const raw = analysisData?.report || generateDemoReport();
    return sanitizeReportContent(raw);
  }, [analysisData, generateDemoReport]);

  if (!isValidCrypto) {
    return (
      <Card className={`w-full ${className}`}>
        <CardContent className="p-6">
          <div className="text-center text-muted-foreground">
            Invalid cryptocurrency data
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={`w-full ${className}`}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5" />
          AI Analysis
          <Badge variant="secondary" className="ml-auto">
            AGENTFINANCE
          </Badge>
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Service Status - VERSÃO SEGURA */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Zap className="w-4 h-4" />
            Service Status
          </div>

          <div className="flex items-center gap-2 p-3 rounded-lg bg-warning/10 border border-warning/20">
            <AlertCircle className="w-4 h-4 text-warning" />
            <span className="text-sm text-warning">
              AI service is not available. Running in demo mode.
            </span>
          </div>
        </div>

        {/* Performance Indicators */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Sparkles className="w-4 h-4" />
            Performance
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div className="flex items-center gap-2 p-3 rounded-lg bg-primary/10 border border-primary/20">
              <Zap className="w-4 h-4 text-primary" />
              <div>
                <div className="text-xs text-muted-foreground">Speed</div>
                <div className="text-sm font-semibold text-primary">2-5s</div>
              </div>
            </div>

            <div className="flex items-center gap-2 p-3 rounded-lg bg-success/10 border border-success/20">
              <TrendingUp className="w-4 h-4 text-success" />
              <div>
                <div className="text-xs text-muted-foreground">Fallback</div>
                <div className="text-sm font-semibold text-success">Auto</div>
              </div>
            </div>
          </div>
        </div>

        {/* Generate Analysis Button */}
        <div className="space-y-3">
          <Button
            onClick={handleGenerateAnalysis}
            disabled={isPending || !isValidCrypto}
            className="w-full"
            size="lg"
          >
            {isPending ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Generating Analysis...
              </>
            ) : (
              <>
                <Brain className="w-4 h-4 mr-2" />
                Generate Demo Analysis
              </>
            )}
          </Button>

          <div className="flex items-center gap-2 p-3 rounded-lg bg-info/10 border border-info/20">
            <Info className="w-4 h-4 text-info" />
            <div className="text-sm text-info">
              <div className="font-medium">Demo Mode Active</div>
              <div className="text-xs opacity-75">
                To enable AI analysis, configure the backend service
              </div>
            </div>
          </div>
        </div>

        {/* Error Display */}
        <AnimatePresence>
          {error && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20"
            >
              <AlertCircle className="w-4 h-4 text-destructive" />
              <span className="text-sm text-destructive">
                Failed to generate analysis. Please try again.
              </span>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Report Display - VERSÃO SEGURA */}
        <AnimatePresence>
          {showReport && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="space-y-3"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <FileText className="w-4 h-4" />
                  Analysis Report
                </div>
                <Button
                  onClick={handleDownloadReport}
                  variant="outline"
                  size="sm"
                  disabled={!reportContent}
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download
                </Button>
              </div>
              
              <div
                className="p-4 rounded-lg bg-card/50 border border-border/50 w-full"
                style={{
                  maxHeight: "min(60vh, 420px)",
                  minHeight: 120,
                  overflowY: "auto",
                  WebkitOverflowScrolling: "touch",
                }}
              >
                <div className="prose prose-sm max-w-none text-foreground">
                  <pre className="whitespace-pre-wrap text-sm font-mono">
                    {reportContent}
                  </pre>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </CardContent>
    </Card>
  );
};

export default AIAnalysis;
