import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";
import {
  Brain,
  Zap,
  TrendingUp,
  FileText,
  Download,
  AlertCircle,
  Info,
  Sparkles,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import { useSingleCryptoAnalysis } from "@/shared/api/hooks/useCrypto";
import { CryptoAsset } from "@/shared/api/types";

interface AIAnalysisProps {
  crypto: CryptoAsset;
  className?: string;
}

const AIAnalysis: React.FC<AIAnalysisProps> = ({ crypto, className = "" }) => {
  const [showReport, setShowReport] = useState(false);

  const {
    mutate: generateAnalysis,
    isPending,
    error,
    data: analysisData,
  } = useSingleCryptoAnalysis();

  const handleGenerateAnalysis = () => {
    generateAnalysis(crypto, {
      onSuccess: () => {
        setShowReport(true);
      },
    });
  };

  const handleDownloadReport = () => {
    const reportContent = analysisData?.report || generateDemoReport();
    const blob = new Blob([reportContent], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${crypto.symbol}-analysis-${
      new Date().toISOString().split("T")[0]
    }.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateDemoReport = () => {
    return `# ${crypto.name} (${
      crypto.symbol
    }) Analysis Report\n\nGenerated by AGENTFINANCE AI Agent [DEMO MODE]\nDate: ${new Date().toLocaleDateString()}\nTime: ${new Date().toLocaleTimeString()}\n\n## Market Overview\n- Current Price: $${parseFloat(
      crypto.priceUsd
    ).toLocaleString()}\n- 24h Change: ${parseFloat(
      crypto.changePercent24Hr
    ).toFixed(2)}%\n- Market Cap: $${(
      parseFloat(crypto.marketCapUsd) / 1e9
    ).toFixed(2)}B\n- 24h Volume: $${(
      parseFloat(crypto.volumeUsd24Hr) / 1e6
    ).toFixed(
      2
    )}M\n\n## Technical Analysis\n[DEMO] Based on current market data for ${
      crypto.symbol
    }:\n\n• Price Action: ${
      parseFloat(crypto.changePercent24Hr) > 0
        ? "Bullish momentum"
        : "Bearish pressure"
    }\n• Volume Analysis: ${
      parseFloat(crypto.volumeUsd24Hr) > 1000000
        ? "High trading volume"
        : "Moderate volume"
    }\n• Market Position: ${
      parseFloat(crypto.marketCapUsd) > 10000000000 ? "Large cap" : "Mid cap"
    } cryptocurrency\n\n## Market Sentiment\n• Current Trend: ${
      parseFloat(crypto.changePercent24Hr) > 5
        ? "Strongly Bullish"
        : parseFloat(crypto.changePercent24Hr) > 0
        ? "Bullish"
        : parseFloat(crypto.changePercent24Hr) > -5
        ? "Neutral"
        : "Bearish"
    }\n• Volatility: ${
      Math.abs(parseFloat(crypto.changePercent24Hr)) > 10 ? "High" : "Moderate"
    }\n• Risk Level: ${
      Math.abs(parseFloat(crypto.changePercent24Hr)) > 15 ? "High" : "Medium"
    }\n\n## Investment Recommendations\n• Short-term: ${
      parseFloat(crypto.changePercent24Hr) > 0
        ? "Hold/Accumulate"
        : "Wait for better entry"
    }\n• Medium-term: Monitor key support/resistance levels\n• Long-term: Consider market fundamentals and adoption\n\n## Price Predictions\n• Support Level: $${(
      parseFloat(crypto.priceUsd) * 0.9
    ).toFixed(4)}\n• Resistance Level: $${(
      parseFloat(crypto.priceUsd) * 1.1
    ).toFixed(4)}\n• 7-day Outlook: ${
      parseFloat(crypto.changePercent24Hr) > 0
        ? "Potential upside"
        : "Sideways with downside risk"
    }\n\n## Disclaimer\nThis is a demo analysis. For real AI-powered analysis, start the AGENTFINANCE service.\nThis analysis is for informational purposes only and should not be considered as financial advice.`;
  };

  return (
    <Card className={`w-full ${className}`}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5" />
          AI Analysis
          <Badge variant="secondary" className="ml-auto">
            AGENTFINANCE
          </Badge>
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Service Status */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Zap className="w-4 h-4" />
            Service Status
          </div>

          <div className="flex items-center gap-2 p-3 rounded-lg bg-warning/10 border border-warning/20">
            <AlertCircle className="w-4 h-4 text-warning" />
            <span className="text-sm text-warning">
              AGENTFINANCE service is not available. Running in demo mode.
            </span>
          </div>
        </div>

        {/* Performance Indicators */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Sparkles className="w-4 h-4" />
            Performance
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div className="flex items-center gap-2 p-3 rounded-lg bg-primary/10 border border-primary/20">
              <Zap className="w-4 h-4 text-primary" />
              <div>
                <div className="text-xs text-muted-foreground">Speed</div>
                <div className="text-sm font-semibold text-primary">2-5s</div>
              </div>
            </div>

            <div className="flex items-center gap-2 p-3 rounded-lg bg-success/10 border border-success/20">
              <TrendingUp className="w-4 h-4 text-success" />
              <div>
                <div className="text-xs text-muted-foreground">Fallback</div>
                <div className="text-sm font-semibold text-success">Auto</div>
              </div>
            </div>
          </div>
        </div>

        {/* Generate Analysis Button */}
        <div className="space-y-3">
          <Button
            onClick={handleGenerateAnalysis}
            disabled={isPending}
            className="w-full"
            size="lg"
          >
            {isPending ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Generating Analysis...
              </>
            ) : (
              <>
                <Brain className="w-4 h-4 mr-2" />
                Generate Demo Analysis
              </>
            )}
          </Button>

          <div className="flex items-center gap-2 p-3 rounded-lg bg-info/10 border border-info/20">
            <Info className="w-4 h-4 text-info" />
            <div className="text-sm text-info">
              <div className="font-medium">Demo Mode Active</div>
              <div className="text-xs opacity-75">
                To enable AI analysis, start the AGENTFINANCE service on
                localhost:8000
              </div>
            </div>
          </div>
        </div>

        {/* Error Display */}
        <AnimatePresence>
          {error && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20"
            >
              <AlertCircle className="w-4 h-4 text-destructive" />
              <span className="text-sm text-destructive">
                {error.message || "Failed to generate analysis"}
              </span>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Report Display */}
        <AnimatePresence>
          {showReport && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="space-y-3"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <FileText className="w-4 h-4" />
                  Analysis Report
                </div>
                <Button
                  onClick={handleDownloadReport}
                  variant="outline"
                  size="sm"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download
                </Button>
              </div>
              {/* Container responsivo e rolável */}
              <div
                className="p-4 rounded-lg bg-card/50 border border-border/50 w-full"
                style={{
                  maxHeight: "min(60vh, 420px)", // desktop
                  minHeight: 120,
                  overflowY: "auto",
                  WebkitOverflowScrolling: "touch",
                }}
              >
                <div className="prose prose-sm max-w-none text-foreground">
                  <pre className="whitespace-pre-wrap text-sm font-mono">
                    {analysisData?.report || generateDemoReport()}
                  </pre>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </CardContent>
    </Card>
  );
};

export default AIAnalysis;
