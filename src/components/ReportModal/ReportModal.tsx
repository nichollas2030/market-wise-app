import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  X, 
  Download, 
  Brain, 
  Zap, 
  FileText, 
  Clock, 
  CheckCircle,
  AlertCircle,
  Sparkles,
  TrendingUp
} from 'lucide-react';
import { useCryptoAnalysis } from '@/shared/api/hooks/useCrypto';
import { CryptoAsset } from '@/shared/api/types';
import ReactMarkdown from 'react-markdown';

interface ReportModalProps {
  cryptos: CryptoAsset[];
  isOpen: boolean;
  onClose: () => void;
}

const ReportModal: React.FC<ReportModalProps> = ({ cryptos, isOpen, onClose }) => {
  if (!cryptos || cryptos.length === 0) {
    return null;
  }
  const [hasGenerated, setHasGenerated] = useState(false);
  
  const { 
    mutate: generateAnalysis, 
    isPending, 
    error,
    data: analysisData 
  } = useCryptoAnalysis();

  const handleGenerateReport = () => {
    setHasGenerated(true);
    generateAnalysis(
      cryptos,
      {
        onSuccess: () => {
          // Success handled by the hook
        },
        onError: () => {
          setHasGenerated(false);
        }
      }
    );
  };

  const handleDownloadReport = () => {
    const reportContent = analysisData?.report || generateDemoReport();
    const blob = new Blob([reportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `crypto-analysis-${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateDemoReport = () => {
    return `# Crypto Analysis Report\n\nGenerated by AGENTFINANCE AI Agent [DEMO MODE]\nDate: ${new Date().toLocaleDateString()}\nTime: ${new Date().toLocaleTimeString()}\n\n## Analyzed Cryptocurrencies\n${cryptos.map(crypto => `- ${crypto.name} (${crypto.symbol})`).join('\n')}\n\n## Analysis Report\n[DEMO] This is a demo analysis for the selected cryptocurrencies.\n\n## Disclaimer\nThis is a demo analysis. For real AI-powered analysis, start the AGENTFINANCE service.\nThis analysis is for informational purposes only and should not be considered as financial advice.`;
  };

  const handleClose = () => {
    if (!isPending) {
      onClose();
      setHasGenerated(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="w-full max-w-[95vw] sm:max-w-xl md:max-w-2xl lg:max-w-3xl px-2 py-2 sm:px-6 sm:py-6 max-h-[90vh] h-auto flex flex-col justify-start rounded-2xl overflow-hidden">
        <DialogHeader className="flex-shrink-0">
          <div className="flex flex-col sm:flex-row items-center sm:justify-between gap-4 sm:gap-0 relative">
            <DialogTitle className="flex flex-col sm:flex-row items-center gap-2 sm:gap-3 w-full text-center sm:text-left">
              <div className="w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center mx-auto sm:mx-0">
                <span className="text-white font-bold text-lg">{cryptos[0]?.symbol?.charAt(0) || 'C'}</span>
              </div>
              <div>
                <div className="text-lg sm:text-xl font-bold">Crypto Analysis</div>
                <div className="text-xs sm:text-sm text-muted-foreground">AI-Powered Market Report</div>
              </div>
            </DialogTitle>
            
          </div>
        </DialogHeader>
        <div className="flex flex-col items-center justify-center w-full min-h-[300px]">
          <AnimatePresence>
            {isPending && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="flex-1 flex items-center justify-center p-4 sm:p-8"
              >
                <div className="text-center space-y-6 w-full max-w-md mx-auto">
                  <motion.div
                    animate={{ rotate: [0, 10, -10, 0], scale: [1, 1.1, 1] }}
                    transition={{ duration: 2, repeat: Infinity, ease: 'easeInOut' }}
                    className="mx-auto w-16 h-16 sm:w-20 sm:h-20 bg-gradient-primary rounded-full flex items-center justify-center"
                  >
                    <Brain className="w-8 h-8 sm:w-10 sm:h-10 text-white" />
                  </motion.div>
                  <div className="space-y-3">
                    <h3 className="text-lg sm:text-xl font-semibold">Generating AI Analysis</h3>
                    <p className="text-xs sm:text-sm text-muted-foreground max-w-md mx-auto">
                      Our AI is analyzing market data, technical indicators, and market sentiment for {cryptos.map(c => c.symbol).join(', ')}
                    </p>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
          <AnimatePresence>
            {!isPending && !error && !hasGenerated && !analysisData?.report && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="flex-1 flex items-center justify-center p-4 sm:p-8 w-full"
              >
                <div className="text-center space-y-6 w-full max-w-md mx-auto">
                  <div className="w-16 h-16 sm:w-20 sm:h-20 bg-gradient-primary rounded-full flex items-center justify-center mx-auto">
                    <Brain className="w-8 h-8 sm:w-10 sm:h-10 text-white" />
                  </div>
                  <div className="space-y-3">
                    <h3 className="text-lg sm:text-xl font-semibold">Ready to Generate Analysis</h3>
                    <p className="text-xs sm:text-sm text-muted-foreground max-w-md mx-auto">
                      Get an AI-powered analysis of {cryptos.length > 0 ? cryptos.map(c => c.symbol).join(', ') : ''} including technical indicators, market sentiment, and investment recommendations.
                    </p>
                  </div>
                  <div className="flex justify-center w-full">
                    <Button
                      onClick={handleGenerateReport}
                      size="lg"
                      className="w-full sm:w-auto flex items-center gap-2 justify-center"
                    >
                      <Brain className="w-5 h-5" />
                      Generate AI Analysis
                    </Button>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
          <AnimatePresence>
            {error && !isPending && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="flex-1 flex items-center justify-center p-8"
              >
                <div className="text-center space-y-4">
                  <div className="w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mx-auto">
                    <AlertCircle className="w-8 h-8 text-destructive" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-destructive mb-2">Analysis Failed</h3>
                    <p className="text-muted-foreground mb-4">
                      {error.message || 'Unable to generate AI analysis. Please try again.'}
                    </p>
                    <Button onClick={handleGenerateReport} variant="outline">
                      <Brain className="w-4 h-4 mr-2" />
                      Try Again
                    </Button>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
          <AnimatePresence>
            {!isPending && !error && (analysisData?.report || hasGenerated) && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="flex-1 flex flex-col"
              >
                <div className="flex items-center justify-between p-4 border-b border-border/50">
                  <div className="flex items-center gap-2">
                    <FileText className="w-5 h-5 text-primary" />
                    <span className="font-medium">Analysis Report</span>
                    {analysisData?.generationTime && (
                      <Badge variant="outline" className="text-xs">
                        Generated in {(analysisData.generationTime / 1000).toFixed(1)}s
                      </Badge>
                    )}
                  </div>
                  
                  <Button
                    onClick={handleDownloadReport}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <Download className="w-4 h-4" />
                    Download
                  </Button>
                </div>
                <div className="flex-1 min-h-0 overflow-y-auto p-0 sm:p-2">
                   <div className="prose max-w-none text-foreground break-words text-[15px] sm:text-base leading-relaxed scrollbar-thin scrollbar-thumb-primary scrollbar-track-muted overflow-y-auto h-full w-full">
                    <ReactMarkdown
                      components={{
                        pre: ({children, ...props}) => (
                          <pre className="bg-muted/30 p-3 rounded-lg overflow-x-auto text-xs sm:text-sm" {...props}>
                            {children}
                          </pre>
                        ),
                        code: ({children, ...props}) => (
                          <code className="bg-muted/40 px-1 py-0.5 rounded text-xs sm:text-sm" {...props}>
                            {children}
                          </code>
                        ),
                        h1: ({children, ...props}) => (
                          <h1 className="text-xl sm:text-2xl font-bold mt-4 mb-2" {...props}>
                            {children}
                          </h1>
                        ),
                        h2: ({children, ...props}) => (
                          <h2 className="text-lg sm:text-xl font-semibold mt-3 mb-2" {...props}>
                            {children}
                          </h2>
                        ),
                        h3: ({children, ...props}) => (
                          <h3 className="text-base sm:text-lg font-semibold mt-2 mb-1" {...props}>
                            {children}
                          </h3>
                        ),
                        ul: ({children, ...props}) => (
                          <ul className="list-disc pl-5 my-2" {...props}>
                            {children}
                          </ul>
                        ),
                        ol: ({children, ...props}) => (
                          <ol className="list-decimal pl-5 my-2" {...props}>
                            {children}
                          </ol>
                        ),
                        li: ({children, ...props}) => (
                          <li className="mb-1" {...props}>
                            {children}
                          </li>
                        ),
                        p: ({children, ...props}) => (
                          <p className="mb-2" {...props}>
                            {children}
                          </p>
                        ),
                        strong: ({children, ...props}) => (
                          <strong className="font-bold" {...props}>
                            {children}
                          </strong>
                        ),
                        em: ({children, ...props}) => (
                          <em className="italic" {...props}>
                            {children}
                          </em>
                        ),
                        blockquote: ({children, ...props}) => (
                          <blockquote className="border-l-4 border-primary pl-4 italic my-2" {...props}>
                            {children}
                          </blockquote>
                        ),
                        a: ({children, ...props}) => (
                          <a 
                            className="text-primary underline" 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            {...props}
                          >
                            {children}
                          </a>
                        ),
                      }}
                    >
                      {analysisData?.report || generateDemoReport()}
                    </ReactMarkdown>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ReportModal; 